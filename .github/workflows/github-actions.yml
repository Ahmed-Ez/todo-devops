name: CI-CD

on: [push]

jobs:
  test:
    name: build & test
    environment: demo
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:7
        ports: ['27017:27017']
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval=10s --health-timeout=5s --health-retries=12

    env:
      MONGODB_URI: mongodb://127.0.0.1:27017/todo_test
      NODE_ENV: test
      API_KEY: ${{ secrets.API_TOKEN }}

    steps:
      - uses: actions/checkout@v5
      - name: Use node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16.x
          cache: npm
      - run: npm ci
      - name: Wait for Mongo
        shell: bash
        run: |
          for i in {1..60}; do
            (echo > /dev/tcp/127.0.0.1/27017) >/dev/null 2>&1 && break
            sleep 1
          done
      - name: Run tests
        run: npm test -- --runInBand

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    environment: demo
    needs: [test]
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    outputs:
      digest: ${{ steps.push.outputs.digest }}
    steps:
      - uses: actions/checkout@v5
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_SECRET }}
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/ahmedezz9/todo-app
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy_to_eks:
    name: Deploy to eks
    runs-on: ubuntu-latest
    environment: demo
    needs: [push_to_registry]
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
      K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE || 'todo-app' }}
      DOCKERHUB_IMAGE: ${{ vars.DOCKERHUB_IMAGE || 'docker.io/ahmedezz9/todo-app' }}
      IMAGE_DIGEST: ${{ needs.push_to_registry.outputs.digest }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}"

      - name: Ensure namespace exists
        run: kubectl get ns "${K8S_NAMESPACE}" || kubectl create ns "${K8S_NAMESPACE}"

      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Render secrets from GH
        env:
          K8S_NAMESPACE: ${{ env.K8S_NAMESPACE }}
          MONGODB_URI: ${{ secrets.ATLAS_URI }}
          DB_NAME: ${{ vars.DB_NAME }}
          API_KEY: ${{ secrets.API_TOKEN }}
        run: |
          envsubst < k8s/secrets.tmpl.yaml | kubectl apply -f -

      - name: Apply config & service
        run: |
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/config.yaml
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/service.yaml
          # or: kubectl apply -n "${K8S_NAMESPACE}" -f k8s/service-public.yaml

      - name: Apply deployment with current image
        env:
          IMAGE: ${{ env.DOCKERHUB_IMAGE }}@${{ env.IMAGE_DIGEST }}
        run: |
          sed "s#IMAGE_URI#${IMAGE}#g" k8s/deployment.yaml | kubectl apply -n "${K8S_NAMESPACE}" -f -
          kubectl -n "${K8S_NAMESPACE}" rollout status deployment/todo-app-deployment --timeout=180s
